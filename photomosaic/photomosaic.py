import os

from photomosaic.parse import InputParser
from photomosaic.image_distance import CandidateImageDistanceGrid
from photomosaic.output_layout import OutputLayout
from photomosaic.output_image import OutputImage

import skimage.io as si


class Photomosaic(object):
    """
    An object that represents a photomosaic.

    Attributes:
        input_parser: A photomosaic.parse.InputParser generated by the JSON of parameters
        photomosaic_folder: The working folder that will be used for the generation of the photomosaic
        comparison_candidate_images: A dict that takes as key the name of a comparison candidate image and as values a np.ndarray containing the contents of that image
        comparison_target_images: A dict that takes as key the name of a comparison target image and as values a np.ndarray containing the contents of that image
        output_candidate_images: A dict that takes as key the name of an output candidate image and as values a np.ndarray containing the contents of that image
        image_distance_grids: A dict that takes as key the name of a comparison candidate image and as values a CandidateImageDistanceGrid of that candidate image
        output_layouts: A dict that takes as key the name of a comparison candidate image and as values an OutputLayout of the optimal outputs as of that candidate image being processed
        output_images: A dict that takes as key the name of a comparison candidate image and as values an OutputImage of the optimal photomosaic as of that candidate image being processed

    Methods:
        generate: Populate each of the attributes and generate the photomosaic
    """

    def __init__(self, parameters: str):
        self._parameters = parameters
        self.input_parser = None
        self.photomosaic_folder = None
        self.comparison_candidate_images = None
        self.comparison_target_images = None
        self.output_candidate_images = None
        self.image_distance_grids = {}
        self.output_layouts = {}
        self.output_images = {}
        raise NotImplementedError

    def generate(self):
        # We start by parsing the input
        self.input_parser = InputParser(self._parameters)
        self.input_parser.parse()
        self.photomosaic_folder = self.input_parser.photomosaic_folder
        # We read each of the images using imread
        comparison_candidate_images_folder = os.path.join(self.photomosaic_folder, 'comparison_candidate_images')
        comparison_target_images_folder = os.path.join(self.photomosaic_folder, 'comparison_target_images')
        output_candidate_images_folder = os.path.join(self.photomosaic_folder, 'output_candidate_images')
        self.comparison_candidate_images = {imgname: si.imread(os.path.join(comparison_candidate_images_folder, imgname)) for imgname in os.listdir(comparison_candidate_images_folder)}
        self.comparison_target_images = {imgname: si.imread(os.path.join(comparison_target_images_folder, imgname)) for imgname in os.listdir(comparison_target_images_folder)}
        self.output_candidate_images = {imgname: si.imread(os.path.join(output_candidate_images_folder, imgname)) for imgname in os.listdir(output_candidate_images_folder)}
        # We iterate over each of the candidate images to update our photomosaic based on that image
        for imgname in sorted(self.comparison_candidate_images.keys()):
            # We calculate the image distance grid for that candidate image, update the output layout, and generate an output image
            self.image_distance_grids[imgname] = CandidateImageDistanceGrid(self.comparison_candidate_images[imgname], self.comparison_target_images.values())
            self.image_distance_grids[imgname].calculate()
            self.output_layouts[imgname] = OutputLayout(self.image_distance_grids)
            self.output_layouts[imgname].calculate()
            self.output_images[imgname] = OutputImage(self.output_layouts[imgname].image_grid, os.path.join(self.photomosaic_folder, 'output_candidate_images'))
            self.output_images[imgname].assemble()
